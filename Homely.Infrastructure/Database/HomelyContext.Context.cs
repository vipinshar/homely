//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Homely.Infrastructure.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class homely_Context : DbContext
    {
        public homely_Context()
            : base("name=homely_Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<tbl_ContactUs> tbl_ContactUs { get; set; }
        public virtual DbSet<tbl_FavouriteProperty> tbl_FavouriteProperty { get; set; }
        public virtual DbSet<tbl_Feedback> tbl_Feedback { get; set; }
        public virtual DbSet<tbl_Master_Amenities> tbl_Master_Amenities { get; set; }
        public virtual DbSet<tbl_Master_Availability> tbl_Master_Availability { get; set; }
        public virtual DbSet<tbl_Master_Bedroom> tbl_Master_Bedroom { get; set; }
        public virtual DbSet<tbl_Master_City> tbl_Master_City { get; set; }
        public virtual DbSet<tbl_Master_Country> tbl_Master_Country { get; set; }
        public virtual DbSet<tbl_Master_Facing> tbl_Master_Facing { get; set; }
        public virtual DbSet<tbl_Master_Furnished> tbl_Master_Furnished { get; set; }
        public virtual DbSet<tbl_Master_Messages> tbl_Master_Messages { get; set; }
        public virtual DbSet<tbl_Master_MinimumContract> tbl_Master_MinimumContract { get; set; }
        public virtual DbSet<tbl_Master_Ownership> tbl_Master_Ownership { get; set; }
        public virtual DbSet<tbl_Master_PropertyType> tbl_Master_PropertyType { get; set; }
        public virtual DbSet<tbl_Master_Restriction> tbl_Master_Restriction { get; set; }
        public virtual DbSet<tbl_Master_State> tbl_Master_State { get; set; }
        public virtual DbSet<tbl_Master_SubCity> tbl_Master_SubCity { get; set; }
        public virtual DbSet<tbl_Master_SubPropertyType> tbl_Master_SubPropertyType { get; set; }
        public virtual DbSet<tbl_Master_Suitable> tbl_Master_Suitable { get; set; }
        public virtual DbSet<tbl_Master_Transaction> tbl_Master_Transaction { get; set; }
        public virtual DbSet<tbl_Property> tbl_Property { get; set; }
        public virtual DbSet<tbl_Property1> tbl_Property1 { get; set; }
        public virtual DbSet<tbl_PropertyReview> tbl_PropertyReview { get; set; }
        public virtual DbSet<tbl_Registration> tbl_Registration { get; set; }
        public virtual DbSet<tblArea> tblArea { get; set; }
        public virtual DbSet<tblAreas> tblAreas { get; set; }
        public virtual DbSet<tblCities> tblCities { get; set; }
        public virtual DbSet<tblCity> tblCity { get; set; }
        public virtual DbSet<tblCountries> tblCountries { get; set; }
        public virtual DbSet<tblCountry> tblCountry { get; set; }
        public virtual DbSet<tblState> tblState { get; set; }
        public virtual DbSet<tblStates> tblStates { get; set; }
        public virtual DbSet<tbl_PostRequirment> tbl_PostRequirment { get; set; }
        public virtual DbSet<tbl_QuickListing> tbl_QuickListing { get; set; }
    
        [DbFunction("Entities", "Split")]
        public virtual IQueryable<Split_Result> Split(string rowData, string splitOn)
        {
            var rowDataParameter = rowData != null ?
                new ObjectParameter("RowData", rowData) :
                new ObjectParameter("RowData", typeof(string));
    
            var splitOnParameter = splitOn != null ?
                new ObjectParameter("SplitOn", splitOn) :
                new ObjectParameter("SplitOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[Entities].[Split](@RowData, @SplitOn)", rowDataParameter, splitOnParameter);
        }
    
        public virtual ObjectResult<string> PROC_AddFavouriteProperty(string emailId, string propertyCode)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var propertyCodeParameter = propertyCode != null ?
                new ObjectParameter("PropertyCode", propertyCode) :
                new ObjectParameter("PropertyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_AddFavouriteProperty", emailIdParameter, propertyCodeParameter);
        }
    
        public virtual ObjectResult<string> PROC_AddProperty(string emailId, Nullable<int> transactionType, Nullable<int> ownershipType, Nullable<int> propertyType, Nullable<int> propertyCity, string locality, Nullable<int> area, string measure, Nullable<int> rent, string societyName, Nullable<int> bedroom, Nullable<int> floor, string description, Nullable<int> bathroom, Nullable<int> balcony, string floorInBuilding, Nullable<int> furnished, Nullable<int> facing, string amenities, Nullable<int> shoppingMallDistance, Nullable<int> hospitalDistance, Nullable<int> schoolDistance, Nullable<int> aTMDistance, string name, Nullable<int> memberCity, string memberAddress, string mobile, string alternateNumber, string memberEmailID, Nullable<int> availability, string propertyOtherCity, string ownerOtherCity, Nullable<int> memberState, string memberAddress2, string memberAddress3, string memberPinCode, Nullable<int> timeSlot, string slugUrl, Nullable<int> localityID, string suitable, string securityDeposit, string maintenaneCharge, Nullable<int> minimumContract, Nullable<int> restriction, string pwd)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            var propertyCityParameter = propertyCity.HasValue ?
                new ObjectParameter("PropertyCity", propertyCity) :
                new ObjectParameter("PropertyCity", typeof(int));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var measureParameter = measure != null ?
                new ObjectParameter("Measure", measure) :
                new ObjectParameter("Measure", typeof(string));
    
            var rentParameter = rent.HasValue ?
                new ObjectParameter("Rent", rent) :
                new ObjectParameter("Rent", typeof(int));
    
            var societyNameParameter = societyName != null ?
                new ObjectParameter("SocietyName", societyName) :
                new ObjectParameter("SocietyName", typeof(string));
    
            var bedroomParameter = bedroom.HasValue ?
                new ObjectParameter("Bedroom", bedroom) :
                new ObjectParameter("Bedroom", typeof(int));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bathroomParameter = bathroom.HasValue ?
                new ObjectParameter("Bathroom", bathroom) :
                new ObjectParameter("Bathroom", typeof(int));
    
            var balconyParameter = balcony.HasValue ?
                new ObjectParameter("Balcony", balcony) :
                new ObjectParameter("Balcony", typeof(int));
    
            var floorInBuildingParameter = floorInBuilding != null ?
                new ObjectParameter("FloorInBuilding", floorInBuilding) :
                new ObjectParameter("FloorInBuilding", typeof(string));
    
            var furnishedParameter = furnished.HasValue ?
                new ObjectParameter("Furnished", furnished) :
                new ObjectParameter("Furnished", typeof(int));
    
            var facingParameter = facing.HasValue ?
                new ObjectParameter("Facing", facing) :
                new ObjectParameter("Facing", typeof(int));
    
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("Amenities", amenities) :
                new ObjectParameter("Amenities", typeof(string));
    
            var shoppingMallDistanceParameter = shoppingMallDistance.HasValue ?
                new ObjectParameter("ShoppingMallDistance", shoppingMallDistance) :
                new ObjectParameter("ShoppingMallDistance", typeof(int));
    
            var hospitalDistanceParameter = hospitalDistance.HasValue ?
                new ObjectParameter("HospitalDistance", hospitalDistance) :
                new ObjectParameter("HospitalDistance", typeof(int));
    
            var schoolDistanceParameter = schoolDistance.HasValue ?
                new ObjectParameter("SchoolDistance", schoolDistance) :
                new ObjectParameter("SchoolDistance", typeof(int));
    
            var aTMDistanceParameter = aTMDistance.HasValue ?
                new ObjectParameter("ATMDistance", aTMDistance) :
                new ObjectParameter("ATMDistance", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var memberCityParameter = memberCity.HasValue ?
                new ObjectParameter("MemberCity", memberCity) :
                new ObjectParameter("MemberCity", typeof(int));
    
            var memberAddressParameter = memberAddress != null ?
                new ObjectParameter("MemberAddress", memberAddress) :
                new ObjectParameter("MemberAddress", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateNumberParameter = alternateNumber != null ?
                new ObjectParameter("AlternateNumber", alternateNumber) :
                new ObjectParameter("AlternateNumber", typeof(string));
    
            var memberEmailIDParameter = memberEmailID != null ?
                new ObjectParameter("MemberEmailID", memberEmailID) :
                new ObjectParameter("MemberEmailID", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            var propertyOtherCityParameter = propertyOtherCity != null ?
                new ObjectParameter("PropertyOtherCity", propertyOtherCity) :
                new ObjectParameter("PropertyOtherCity", typeof(string));
    
            var ownerOtherCityParameter = ownerOtherCity != null ?
                new ObjectParameter("OwnerOtherCity", ownerOtherCity) :
                new ObjectParameter("OwnerOtherCity", typeof(string));
    
            var memberStateParameter = memberState.HasValue ?
                new ObjectParameter("MemberState", memberState) :
                new ObjectParameter("MemberState", typeof(int));
    
            var memberAddress2Parameter = memberAddress2 != null ?
                new ObjectParameter("MemberAddress2", memberAddress2) :
                new ObjectParameter("MemberAddress2", typeof(string));
    
            var memberAddress3Parameter = memberAddress3 != null ?
                new ObjectParameter("MemberAddress3", memberAddress3) :
                new ObjectParameter("MemberAddress3", typeof(string));
    
            var memberPinCodeParameter = memberPinCode != null ?
                new ObjectParameter("MemberPinCode", memberPinCode) :
                new ObjectParameter("MemberPinCode", typeof(string));
    
            var timeSlotParameter = timeSlot.HasValue ?
                new ObjectParameter("TimeSlot", timeSlot) :
                new ObjectParameter("TimeSlot", typeof(int));
    
            var slugUrlParameter = slugUrl != null ?
                new ObjectParameter("slugUrl", slugUrl) :
                new ObjectParameter("slugUrl", typeof(string));
    
            var localityIDParameter = localityID.HasValue ?
                new ObjectParameter("LocalityID", localityID) :
                new ObjectParameter("LocalityID", typeof(int));
    
            var suitableParameter = suitable != null ?
                new ObjectParameter("suitable", suitable) :
                new ObjectParameter("suitable", typeof(string));
    
            var securityDepositParameter = securityDeposit != null ?
                new ObjectParameter("securityDeposit", securityDeposit) :
                new ObjectParameter("securityDeposit", typeof(string));
    
            var maintenaneChargeParameter = maintenaneCharge != null ?
                new ObjectParameter("maintenaneCharge", maintenaneCharge) :
                new ObjectParameter("maintenaneCharge", typeof(string));
    
            var minimumContractParameter = minimumContract.HasValue ?
                new ObjectParameter("minimumContract", minimumContract) :
                new ObjectParameter("minimumContract", typeof(int));
    
            var restrictionParameter = restriction.HasValue ?
                new ObjectParameter("restriction", restriction) :
                new ObjectParameter("restriction", typeof(int));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_AddProperty", emailIdParameter, transactionTypeParameter, ownershipTypeParameter, propertyTypeParameter, propertyCityParameter, localityParameter, areaParameter, measureParameter, rentParameter, societyNameParameter, bedroomParameter, floorParameter, descriptionParameter, bathroomParameter, balconyParameter, floorInBuildingParameter, furnishedParameter, facingParameter, amenitiesParameter, shoppingMallDistanceParameter, hospitalDistanceParameter, schoolDistanceParameter, aTMDistanceParameter, nameParameter, memberCityParameter, memberAddressParameter, mobileParameter, alternateNumberParameter, memberEmailIDParameter, availabilityParameter, propertyOtherCityParameter, ownerOtherCityParameter, memberStateParameter, memberAddress2Parameter, memberAddress3Parameter, memberPinCodeParameter, timeSlotParameter, slugUrlParameter, localityIDParameter, suitableParameter, securityDepositParameter, maintenaneChargeParameter, minimumContractParameter, restrictionParameter, pwdParameter);
        }
    
        public virtual ObjectResult<string> PROC_AddPropertyReview(Nullable<decimal> ownershipType, string reviewFor, string reviewForValue, string review, string ratingLocation1, string ratingLocation2, string ratingLocation3, string ratingLocation4, string ratingLocation5, string ratingLocation6, string ratingSociety1, string ratingSociety2, string ratingSociety3, string ratingSociety4, string ratingSociety5, string ratingSociety6, string ratingSociety7)
        {
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(decimal));
    
            var reviewForParameter = reviewFor != null ?
                new ObjectParameter("ReviewFor", reviewFor) :
                new ObjectParameter("ReviewFor", typeof(string));
    
            var reviewForValueParameter = reviewForValue != null ?
                new ObjectParameter("ReviewForValue", reviewForValue) :
                new ObjectParameter("ReviewForValue", typeof(string));
    
            var reviewParameter = review != null ?
                new ObjectParameter("Review", review) :
                new ObjectParameter("Review", typeof(string));
    
            var ratingLocation1Parameter = ratingLocation1 != null ?
                new ObjectParameter("RatingLocation1", ratingLocation1) :
                new ObjectParameter("RatingLocation1", typeof(string));
    
            var ratingLocation2Parameter = ratingLocation2 != null ?
                new ObjectParameter("RatingLocation2", ratingLocation2) :
                new ObjectParameter("RatingLocation2", typeof(string));
    
            var ratingLocation3Parameter = ratingLocation3 != null ?
                new ObjectParameter("RatingLocation3", ratingLocation3) :
                new ObjectParameter("RatingLocation3", typeof(string));
    
            var ratingLocation4Parameter = ratingLocation4 != null ?
                new ObjectParameter("RatingLocation4", ratingLocation4) :
                new ObjectParameter("RatingLocation4", typeof(string));
    
            var ratingLocation5Parameter = ratingLocation5 != null ?
                new ObjectParameter("RatingLocation5", ratingLocation5) :
                new ObjectParameter("RatingLocation5", typeof(string));
    
            var ratingLocation6Parameter = ratingLocation6 != null ?
                new ObjectParameter("RatingLocation6", ratingLocation6) :
                new ObjectParameter("RatingLocation6", typeof(string));
    
            var ratingSociety1Parameter = ratingSociety1 != null ?
                new ObjectParameter("RatingSociety1", ratingSociety1) :
                new ObjectParameter("RatingSociety1", typeof(string));
    
            var ratingSociety2Parameter = ratingSociety2 != null ?
                new ObjectParameter("RatingSociety2", ratingSociety2) :
                new ObjectParameter("RatingSociety2", typeof(string));
    
            var ratingSociety3Parameter = ratingSociety3 != null ?
                new ObjectParameter("RatingSociety3", ratingSociety3) :
                new ObjectParameter("RatingSociety3", typeof(string));
    
            var ratingSociety4Parameter = ratingSociety4 != null ?
                new ObjectParameter("RatingSociety4", ratingSociety4) :
                new ObjectParameter("RatingSociety4", typeof(string));
    
            var ratingSociety5Parameter = ratingSociety5 != null ?
                new ObjectParameter("RatingSociety5", ratingSociety5) :
                new ObjectParameter("RatingSociety5", typeof(string));
    
            var ratingSociety6Parameter = ratingSociety6 != null ?
                new ObjectParameter("RatingSociety6", ratingSociety6) :
                new ObjectParameter("RatingSociety6", typeof(string));
    
            var ratingSociety7Parameter = ratingSociety7 != null ?
                new ObjectParameter("RatingSociety7", ratingSociety7) :
                new ObjectParameter("RatingSociety7", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_AddPropertyReview", ownershipTypeParameter, reviewForParameter, reviewForValueParameter, reviewParameter, ratingLocation1Parameter, ratingLocation2Parameter, ratingLocation3Parameter, ratingLocation4Parameter, ratingLocation5Parameter, ratingLocation6Parameter, ratingSociety1Parameter, ratingSociety2Parameter, ratingSociety3Parameter, ratingSociety4Parameter, ratingSociety5Parameter, ratingSociety6Parameter, ratingSociety7Parameter);
        }
    
        public virtual ObjectResult<string> PROC_Agent(string emailId, string password, Nullable<int> city, Nullable<int> ownershipType, string firstName, string mobile, string alternate, string companyName, string companyAddress, string propertyType, string dealsIn, string specialiseIn, string image, string @for, string registrationID)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateParameter = alternate != null ?
                new ObjectParameter("Alternate", alternate) :
                new ObjectParameter("Alternate", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var dealsInParameter = dealsIn != null ?
                new ObjectParameter("DealsIn", dealsIn) :
                new ObjectParameter("DealsIn", typeof(string));
    
            var specialiseInParameter = specialiseIn != null ?
                new ObjectParameter("SpecialiseIn", specialiseIn) :
                new ObjectParameter("SpecialiseIn", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            var registrationIDParameter = registrationID != null ?
                new ObjectParameter("RegistrationID", registrationID) :
                new ObjectParameter("RegistrationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_Agent", emailIdParameter, passwordParameter, cityParameter, ownershipTypeParameter, firstNameParameter, mobileParameter, alternateParameter, companyNameParameter, companyAddressParameter, propertyTypeParameter, dealsInParameter, specialiseInParameter, imageParameter, forParameter, registrationIDParameter);
        }
    
        public virtual ObjectResult<string> PROC_Builder(string emailId, string password, Nullable<int> city, Nullable<int> ownershipType, string firstName, string mobile, string alternate, string companyName, string companyAddress, string propertyType, string propertiesAt, string image, string @for, string registrationID)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateParameter = alternate != null ?
                new ObjectParameter("Alternate", alternate) :
                new ObjectParameter("Alternate", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var propertiesAtParameter = propertiesAt != null ?
                new ObjectParameter("PropertiesAt", propertiesAt) :
                new ObjectParameter("PropertiesAt", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            var registrationIDParameter = registrationID != null ?
                new ObjectParameter("RegistrationID", registrationID) :
                new ObjectParameter("RegistrationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_Builder", emailIdParameter, passwordParameter, cityParameter, ownershipTypeParameter, firstNameParameter, mobileParameter, alternateParameter, companyNameParameter, companyAddressParameter, propertyTypeParameter, propertiesAtParameter, imageParameter, forParameter, registrationIDParameter);
        }
    
        public virtual ObjectResult<string> PROC_ChangePassword(string userName, string oldPwd, string newPwd)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var oldPwdParameter = oldPwd != null ?
                new ObjectParameter("OldPwd", oldPwd) :
                new ObjectParameter("OldPwd", typeof(string));
    
            var newPwdParameter = newPwd != null ?
                new ObjectParameter("NewPwd", newPwd) :
                new ObjectParameter("NewPwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_ChangePassword", userNameParameter, oldPwdParameter, newPwdParameter);
        }
    
        public virtual ObjectResult<PROC_City_State_Result> PROC_City_State(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_City_State_Result>("PROC_City_State", stateIdParameter);
        }
    
        public virtual int PROC_ContacUs(string emailID, string name, string mobile, string email, string queryType, string query, string queryFrom)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            var queryFromParameter = queryFrom != null ?
                new ObjectParameter("QueryFrom", queryFrom) :
                new ObjectParameter("QueryFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_ContacUs", emailIDParameter, nameParameter, mobileParameter, emailParameter, queryTypeParameter, queryParameter, queryFromParameter);
        }
    
        public virtual int PROC_DealersDetial(Nullable<decimal> stateId, Nullable<decimal> cityId, string location, Nullable<decimal> propertyType)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(decimal));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(decimal));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_DealersDetial", stateIdParameter, cityIdParameter, locationParameter, propertyTypeParameter);
        }
    
        public virtual ObjectResult<PROC_FavouriteProperty_Result> PROC_FavouriteProperty(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FavouriteProperty_Result>("PROC_FavouriteProperty", userNameParameter);
        }
    
        public virtual ObjectResult<PROC_ForgotPassword_Result> PROC_ForgotPassword(string emailId, string mobile)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_ForgotPassword_Result>("PROC_ForgotPassword", emailIdParameter, mobileParameter);
        }
    
        public virtual ObjectResult<PROC_GetAmenForDetailPage_Result> PROC_GetAmenForDetailPage(string propertyCode)
        {
            var propertyCodeParameter = propertyCode != null ?
                new ObjectParameter("PropertyCode", propertyCode) :
                new ObjectParameter("PropertyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GetAmenForDetailPage_Result>("PROC_GetAmenForDetailPage", propertyCodeParameter);
        }
    
        public virtual ObjectResult<PROC_HomePage_Result> PROC_HomePage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_HomePage_Result>("PROC_HomePage");
        }
    
        public virtual ObjectResult<PROC_HomePageGzbListing_Result> PROC_HomePageGzbListing(Nullable<int> city)
        {
            var cityParameter = city.HasValue ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_HomePageGzbListing_Result>("PROC_HomePageGzbListing", cityParameter);
        }
    
        public virtual ObjectResult<PROC_Login_Result> PROC_Login(string userID, string password)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_Login_Result>("PROC_Login", userIDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<PROC_MasterData_Result> PROC_MasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_MasterData_Result>("PROC_MasterData");
        }
    
        public virtual ObjectResult<PROC_MasterData_Review_Result> PROC_MasterData_Review()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_MasterData_Review_Result>("PROC_MasterData_Review");
        }
    
        public virtual ObjectResult<PROC_MemberDetails_Result> PROC_MemberDetails(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_MemberDetails_Result>("PROC_MemberDetails", emailIdParameter);
        }
    
        public virtual ObjectResult<string> PROC_Owner(string emailId, string password, Nullable<int> city, Nullable<int> ownershipType, string firstName, string mobile, string alternate, string @for, string registrationID)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateParameter = alternate != null ?
                new ObjectParameter("Alternate", alternate) :
                new ObjectParameter("Alternate", typeof(string));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            var registrationIDParameter = registrationID != null ?
                new ObjectParameter("RegistrationID", registrationID) :
                new ObjectParameter("RegistrationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_Owner", emailIdParameter, passwordParameter, cityParameter, ownershipTypeParameter, firstNameParameter, mobileParameter, alternateParameter, forParameter, registrationIDParameter);
        }
    
        public virtual int PROC_PostRequirment(string emailId, Nullable<decimal> propertyType, Nullable<decimal> city, string otherCity, string locality, Nullable<decimal> requiredArea, string amenities, Nullable<decimal> transactionType, Nullable<decimal> minimumPrice, Nullable<decimal> maximumPrice, string bHK, Nullable<decimal> ageConstruction, string clientName, string clientMobile, string clientEmail, Nullable<decimal> clientState, Nullable<decimal> clientCity, string clientOtherCity, string clientAddress, string clientAddress2, string clientAddress3, string clientPinCode)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(decimal));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(decimal));
    
            var otherCityParameter = otherCity != null ?
                new ObjectParameter("OtherCity", otherCity) :
                new ObjectParameter("OtherCity", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var requiredAreaParameter = requiredArea.HasValue ?
                new ObjectParameter("RequiredArea", requiredArea) :
                new ObjectParameter("RequiredArea", typeof(decimal));
    
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("Amenities", amenities) :
                new ObjectParameter("Amenities", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(decimal));
    
            var minimumPriceParameter = minimumPrice.HasValue ?
                new ObjectParameter("MinimumPrice", minimumPrice) :
                new ObjectParameter("MinimumPrice", typeof(decimal));
    
            var maximumPriceParameter = maximumPrice.HasValue ?
                new ObjectParameter("MaximumPrice", maximumPrice) :
                new ObjectParameter("MaximumPrice", typeof(decimal));
    
            var bHKParameter = bHK != null ?
                new ObjectParameter("BHK", bHK) :
                new ObjectParameter("BHK", typeof(string));
    
            var ageConstructionParameter = ageConstruction.HasValue ?
                new ObjectParameter("AgeConstruction", ageConstruction) :
                new ObjectParameter("AgeConstruction", typeof(decimal));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var clientMobileParameter = clientMobile != null ?
                new ObjectParameter("ClientMobile", clientMobile) :
                new ObjectParameter("ClientMobile", typeof(string));
    
            var clientEmailParameter = clientEmail != null ?
                new ObjectParameter("ClientEmail", clientEmail) :
                new ObjectParameter("ClientEmail", typeof(string));
    
            var clientStateParameter = clientState.HasValue ?
                new ObjectParameter("ClientState", clientState) :
                new ObjectParameter("ClientState", typeof(decimal));
    
            var clientCityParameter = clientCity.HasValue ?
                new ObjectParameter("ClientCity", clientCity) :
                new ObjectParameter("ClientCity", typeof(decimal));
    
            var clientOtherCityParameter = clientOtherCity != null ?
                new ObjectParameter("ClientOtherCity", clientOtherCity) :
                new ObjectParameter("ClientOtherCity", typeof(string));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            var clientAddress2Parameter = clientAddress2 != null ?
                new ObjectParameter("ClientAddress2", clientAddress2) :
                new ObjectParameter("ClientAddress2", typeof(string));
    
            var clientAddress3Parameter = clientAddress3 != null ?
                new ObjectParameter("ClientAddress3", clientAddress3) :
                new ObjectParameter("ClientAddress3", typeof(string));
    
            var clientPinCodeParameter = clientPinCode != null ?
                new ObjectParameter("ClientPinCode", clientPinCode) :
                new ObjectParameter("ClientPinCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_PostRequirment", emailIdParameter, propertyTypeParameter, cityParameter, otherCityParameter, localityParameter, requiredAreaParameter, amenitiesParameter, transactionTypeParameter, minimumPriceParameter, maximumPriceParameter, bHKParameter, ageConstructionParameter, clientNameParameter, clientMobileParameter, clientEmailParameter, clientStateParameter, clientCityParameter, clientOtherCityParameter, clientAddressParameter, clientAddress2Parameter, clientAddress3Parameter, clientPinCodeParameter);
        }
    
        public virtual ObjectResult<PROC_PropCounting_Result> PROC_PropCounting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_PropCounting_Result>("PROC_PropCounting");
        }
    
        public virtual int PROC_Property_City(Nullable<int> city, string @for)
        {
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_Property_City", cityParameter, forParameter);
        }
    
        public virtual int PROC_Property_City_New(Nullable<int> city, string @for)
        {
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_Property_City_New", cityParameter, forParameter);
        }
    
        public virtual ObjectResult<PROC_PropertyComparison_Result> PROC_PropertyComparison(string propertyCode1, string propertyCode2, string propertyCode3)
        {
            var propertyCode1Parameter = propertyCode1 != null ?
                new ObjectParameter("PropertyCode1", propertyCode1) :
                new ObjectParameter("PropertyCode1", typeof(string));
    
            var propertyCode2Parameter = propertyCode2 != null ?
                new ObjectParameter("PropertyCode2", propertyCode2) :
                new ObjectParameter("PropertyCode2", typeof(string));
    
            var propertyCode3Parameter = propertyCode3 != null ?
                new ObjectParameter("PropertyCode3", propertyCode3) :
                new ObjectParameter("PropertyCode3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_PropertyComparison_Result>("PROC_PropertyComparison", propertyCode1Parameter, propertyCode2Parameter, propertyCode3Parameter);
        }
    
        public virtual ObjectResult<PROC_PropertyDetails_Result> PROC_PropertyDetails(string propertyCode)
        {
            var propertyCodeParameter = propertyCode != null ?
                new ObjectParameter("PropertyCode", propertyCode) :
                new ObjectParameter("PropertyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_PropertyDetails_Result>("PROC_PropertyDetails", propertyCodeParameter);
        }
    
        public virtual int PROC_QuickListing(string emailID, string contactingFor, string name, string email, string mobile)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactingForParameter = contactingFor != null ?
                new ObjectParameter("ContactingFor", contactingFor) :
                new ObjectParameter("ContactingFor", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_QuickListing", emailIDParameter, contactingForParameter, nameParameter, emailParameter, mobileParameter);
        }
    
        public virtual ObjectResult<PROC_Review_Result> PROC_Review()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_Review_Result>("PROC_Review");
        }
    
        public virtual ObjectResult<PROC_Search1_Result> PROC_Search1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_Search1_Result>("PROC_Search1");
        }
    
        public virtual int PROC_SearchProperty(Nullable<decimal> cityId, string localityId, string locality, Nullable<decimal> propertyType, Nullable<decimal> minPrice, Nullable<decimal> maxPrice, string propertyCode, string amenities, Nullable<decimal> avaliability, Nullable<decimal> ownership, Nullable<decimal> furnishing, Nullable<decimal> bedroom, string minimumContract)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(decimal));
    
            var localityIdParameter = localityId != null ?
                new ObjectParameter("LocalityId", localityId) :
                new ObjectParameter("LocalityId", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(decimal));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("MinPrice", minPrice) :
                new ObjectParameter("MinPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(decimal));
    
            var propertyCodeParameter = propertyCode != null ?
                new ObjectParameter("PropertyCode", propertyCode) :
                new ObjectParameter("PropertyCode", typeof(string));
    
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("Amenities", amenities) :
                new ObjectParameter("Amenities", typeof(string));
    
            var avaliabilityParameter = avaliability.HasValue ?
                new ObjectParameter("Avaliability", avaliability) :
                new ObjectParameter("Avaliability", typeof(decimal));
    
            var ownershipParameter = ownership.HasValue ?
                new ObjectParameter("Ownership", ownership) :
                new ObjectParameter("Ownership", typeof(decimal));
    
            var furnishingParameter = furnishing.HasValue ?
                new ObjectParameter("Furnishing", furnishing) :
                new ObjectParameter("Furnishing", typeof(decimal));
    
            var bedroomParameter = bedroom.HasValue ?
                new ObjectParameter("Bedroom", bedroom) :
                new ObjectParameter("Bedroom", typeof(decimal));
    
            var minimumContractParameter = minimumContract != null ?
                new ObjectParameter("MinimumContract", minimumContract) :
                new ObjectParameter("MinimumContract", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_SearchProperty", cityIdParameter, localityIdParameter, localityParameter, propertyTypeParameter, minPriceParameter, maxPriceParameter, propertyCodeParameter, amenitiesParameter, avaliabilityParameter, ownershipParameter, furnishingParameter, bedroomParameter, minimumContractParameter);
        }
    
        public virtual ObjectResult<string> PROC_Tenant(string emailId, string password, Nullable<int> city, Nullable<int> ownershipType, string firstName, string mobile, string alternate, string companyAddress, string permanentAddress, string @for, string registrationID)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateParameter = alternate != null ?
                new ObjectParameter("Alternate", alternate) :
                new ObjectParameter("Alternate", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            var registrationIDParameter = registrationID != null ?
                new ObjectParameter("RegistrationID", registrationID) :
                new ObjectParameter("RegistrationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PROC_Tenant", emailIdParameter, passwordParameter, cityParameter, ownershipTypeParameter, firstNameParameter, mobileParameter, alternateParameter, companyAddressParameter, permanentAddressParameter, forParameter, registrationIDParameter);
        }
    
        public virtual ObjectResult<PROC_Testimonials_Result> PROC_Testimonials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_Testimonials_Result>("PROC_Testimonials");
        }
    
        public virtual int PROC_UpdateProperty(string propCode, Nullable<int> transactionType, Nullable<int> ownershipType, Nullable<int> propertyType, Nullable<int> propertyCity, string locality, Nullable<int> area, string measure, Nullable<int> rent, string societyName, Nullable<int> bedroom, Nullable<int> floor, string description, Nullable<int> bathroom, Nullable<int> balcony, string floorInBuilding, Nullable<int> furnished, Nullable<int> facing, string amenities, Nullable<int> shoppingMallDistance, Nullable<int> hospitalDistance, Nullable<int> schoolDistance, Nullable<int> aTMDistance, string name, Nullable<int> memberCity, string memberAddress, string mobile, string alternateNumber, string memberEmailID, Nullable<int> availability, string propertyOtherCity, string ownerOtherCity, Nullable<int> memberState, string memberAddress2, string memberAddress3, string memberPinCode, Nullable<int> timeSlot, string slugUrl, Nullable<int> localityID, string suitable, string securityDeposit, string maintenaneCharge, Nullable<int> minimumContract, Nullable<int> restriction)
        {
            var propCodeParameter = propCode != null ?
                new ObjectParameter("PropCode", propCode) :
                new ObjectParameter("PropCode", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var ownershipTypeParameter = ownershipType.HasValue ?
                new ObjectParameter("OwnershipType", ownershipType) :
                new ObjectParameter("OwnershipType", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            var propertyCityParameter = propertyCity.HasValue ?
                new ObjectParameter("PropertyCity", propertyCity) :
                new ObjectParameter("PropertyCity", typeof(int));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var measureParameter = measure != null ?
                new ObjectParameter("Measure", measure) :
                new ObjectParameter("Measure", typeof(string));
    
            var rentParameter = rent.HasValue ?
                new ObjectParameter("Rent", rent) :
                new ObjectParameter("Rent", typeof(int));
    
            var societyNameParameter = societyName != null ?
                new ObjectParameter("SocietyName", societyName) :
                new ObjectParameter("SocietyName", typeof(string));
    
            var bedroomParameter = bedroom.HasValue ?
                new ObjectParameter("Bedroom", bedroom) :
                new ObjectParameter("Bedroom", typeof(int));
    
            var floorParameter = floor.HasValue ?
                new ObjectParameter("Floor", floor) :
                new ObjectParameter("Floor", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bathroomParameter = bathroom.HasValue ?
                new ObjectParameter("Bathroom", bathroom) :
                new ObjectParameter("Bathroom", typeof(int));
    
            var balconyParameter = balcony.HasValue ?
                new ObjectParameter("Balcony", balcony) :
                new ObjectParameter("Balcony", typeof(int));
    
            var floorInBuildingParameter = floorInBuilding != null ?
                new ObjectParameter("FloorInBuilding", floorInBuilding) :
                new ObjectParameter("FloorInBuilding", typeof(string));
    
            var furnishedParameter = furnished.HasValue ?
                new ObjectParameter("Furnished", furnished) :
                new ObjectParameter("Furnished", typeof(int));
    
            var facingParameter = facing.HasValue ?
                new ObjectParameter("Facing", facing) :
                new ObjectParameter("Facing", typeof(int));
    
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("Amenities", amenities) :
                new ObjectParameter("Amenities", typeof(string));
    
            var shoppingMallDistanceParameter = shoppingMallDistance.HasValue ?
                new ObjectParameter("ShoppingMallDistance", shoppingMallDistance) :
                new ObjectParameter("ShoppingMallDistance", typeof(int));
    
            var hospitalDistanceParameter = hospitalDistance.HasValue ?
                new ObjectParameter("HospitalDistance", hospitalDistance) :
                new ObjectParameter("HospitalDistance", typeof(int));
    
            var schoolDistanceParameter = schoolDistance.HasValue ?
                new ObjectParameter("SchoolDistance", schoolDistance) :
                new ObjectParameter("SchoolDistance", typeof(int));
    
            var aTMDistanceParameter = aTMDistance.HasValue ?
                new ObjectParameter("ATMDistance", aTMDistance) :
                new ObjectParameter("ATMDistance", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var memberCityParameter = memberCity.HasValue ?
                new ObjectParameter("MemberCity", memberCity) :
                new ObjectParameter("MemberCity", typeof(int));
    
            var memberAddressParameter = memberAddress != null ?
                new ObjectParameter("MemberAddress", memberAddress) :
                new ObjectParameter("MemberAddress", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var alternateNumberParameter = alternateNumber != null ?
                new ObjectParameter("AlternateNumber", alternateNumber) :
                new ObjectParameter("AlternateNumber", typeof(string));
    
            var memberEmailIDParameter = memberEmailID != null ?
                new ObjectParameter("MemberEmailID", memberEmailID) :
                new ObjectParameter("MemberEmailID", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(int));
    
            var propertyOtherCityParameter = propertyOtherCity != null ?
                new ObjectParameter("PropertyOtherCity", propertyOtherCity) :
                new ObjectParameter("PropertyOtherCity", typeof(string));
    
            var ownerOtherCityParameter = ownerOtherCity != null ?
                new ObjectParameter("OwnerOtherCity", ownerOtherCity) :
                new ObjectParameter("OwnerOtherCity", typeof(string));
    
            var memberStateParameter = memberState.HasValue ?
                new ObjectParameter("MemberState", memberState) :
                new ObjectParameter("MemberState", typeof(int));
    
            var memberAddress2Parameter = memberAddress2 != null ?
                new ObjectParameter("MemberAddress2", memberAddress2) :
                new ObjectParameter("MemberAddress2", typeof(string));
    
            var memberAddress3Parameter = memberAddress3 != null ?
                new ObjectParameter("MemberAddress3", memberAddress3) :
                new ObjectParameter("MemberAddress3", typeof(string));
    
            var memberPinCodeParameter = memberPinCode != null ?
                new ObjectParameter("MemberPinCode", memberPinCode) :
                new ObjectParameter("MemberPinCode", typeof(string));
    
            var timeSlotParameter = timeSlot.HasValue ?
                new ObjectParameter("TimeSlot", timeSlot) :
                new ObjectParameter("TimeSlot", typeof(int));
    
            var slugUrlParameter = slugUrl != null ?
                new ObjectParameter("slugUrl", slugUrl) :
                new ObjectParameter("slugUrl", typeof(string));
    
            var localityIDParameter = localityID.HasValue ?
                new ObjectParameter("LocalityID", localityID) :
                new ObjectParameter("LocalityID", typeof(int));
    
            var suitableParameter = suitable != null ?
                new ObjectParameter("suitable", suitable) :
                new ObjectParameter("suitable", typeof(string));
    
            var securityDepositParameter = securityDeposit != null ?
                new ObjectParameter("securityDeposit", securityDeposit) :
                new ObjectParameter("securityDeposit", typeof(string));
    
            var maintenaneChargeParameter = maintenaneCharge != null ?
                new ObjectParameter("maintenaneCharge", maintenaneCharge) :
                new ObjectParameter("maintenaneCharge", typeof(string));
    
            var minimumContractParameter = minimumContract.HasValue ?
                new ObjectParameter("minimumContract", minimumContract) :
                new ObjectParameter("minimumContract", typeof(int));
    
            var restrictionParameter = restriction.HasValue ?
                new ObjectParameter("restriction", restriction) :
                new ObjectParameter("restriction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_UpdateProperty", propCodeParameter, transactionTypeParameter, ownershipTypeParameter, propertyTypeParameter, propertyCityParameter, localityParameter, areaParameter, measureParameter, rentParameter, societyNameParameter, bedroomParameter, floorParameter, descriptionParameter, bathroomParameter, balconyParameter, floorInBuildingParameter, furnishedParameter, facingParameter, amenitiesParameter, shoppingMallDistanceParameter, hospitalDistanceParameter, schoolDistanceParameter, aTMDistanceParameter, nameParameter, memberCityParameter, memberAddressParameter, mobileParameter, alternateNumberParameter, memberEmailIDParameter, availabilityParameter, propertyOtherCityParameter, ownerOtherCityParameter, memberStateParameter, memberAddress2Parameter, memberAddress3Parameter, memberPinCodeParameter, timeSlotParameter, slugUrlParameter, localityIDParameter, suitableParameter, securityDepositParameter, maintenaneChargeParameter, minimumContractParameter, restrictionParameter);
        }
    
        public virtual ObjectResult<usp_HotProperties_Result> usp_HotProperties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_HotProperties_Result>("usp_HotProperties");
        }
    }
}
